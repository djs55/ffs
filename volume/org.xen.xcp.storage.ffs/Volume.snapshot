#!/usr/bin/env python

import sys, urlparse, subprocess, os
import xapi, xapi.volume

class Implementation(xapi.volume.Volume_skeleton):
    def snapshot(self, dbg, sr, key):
        u = urlparse.urlparse(sr)
        if not(os.path.isdir(u.path)):
            raise xapi.volume.Sr_not_attached(sr)
        path = os.path.join(u.path, key)
        if not(os.path.exists(path)):
            raise xapi.volume.Volume_does_not_exist(path)
        path = path
        tmp = path + ".tmp." + str(os.getpid())
        code = subprocess.call([ "cp", "--reflink=always", path, tmp])
        if code <> 0:
            raise xapi.volume.Unimplemented("Does this filesystem support reflinks?")
        base = os.path.basename(path)
        finished = False
        highest_int = -1
        new_name = path
        while not finished:
            # Keep trying to rename to a unique name, until we find one
            exists = filter(lambda x: x.startswith(base), os.listdir(os.path.dirname(path)))
            for filename in exists:
                try:
                    i = int(filename[len(base)+1:])
                    if i > highest_int:
                        highest_int = i
                except:
                    pass
            new_name = path + "." + str(highest_int + 1)
            try:
                os.rename(tmp, new_name)
                finished = True
            except OSError as exc:
                if exc.errno == errno.EEXIST:
                    pass # try again
                else:
                    highest_int = highest_int + 1
                    raise

        stat = os.stat(new_name)
        key = "file://" + new_name
        size = stat.st_size
        return {
            "key": key,
            "name": key,
            "description": "",
            "read_write": True,
            "virtual_size": size,
            "physical_utilisation": 0L,
            "uri": ["raw+file://" + new_name ]
        }

if __name__ == "__main__":
    cmd = xapi.volume.Volume_commandline(Implementation())
    cmd.snapshot()
