#!/usr/bin/env python

import uuid
import urlparse
import os
import errno
import json
import xapi
import xapi.volume
from xapi.common import call
from xapi.common import touch_file_unique


class Implementation(xapi.volume.Volume_skeleton):

    def create(self, dbg, sr, name, description, size):
        # Ensure path is mounted
        u = urlparse.urlparse(sr)
        if not(os.path.isdir(u.path)):
            raise xapi.volume.Sr_not_attached(sr)

        # Round up size to nearest MiB
        size = int(size)
        size_mib = size / 1048576
        if size % 1048576 != 0:
            size_mib = size_mib + 1
        vsize = size_mib * 1048576

        # Sanitise characters used in the volume name
        sanitised = ""
        for c in name:
            if c == os.sep or c in [
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "\"",
                    "|",
                    "?",
                    "*"]:
                sanitised = sanitised + "_"
            else:
                sanitised = sanitised + c
        if sanitised == "":
            sanitised = "unknown"

        key = touch_file_unique(dbg, sanitised, ".vhd")
        path = os.path.join(u.path, key)
        uuid_ = str(uuid.uuid4())
        meta = {
            "uuid": uuid_,
            "name": name,
            "description": description,
            "keys": {}
        }
        with open(path + ".json", "w") as json_fd:
            json.dump(meta, json_fd)
            json_fd.write("\n")

        cmd = ["/usr/bin/vhd-util", "create", "-n", path, "-s", str(size_mib)]
        call(dbg, cmd)

        cmd = ["/usr/bin/vhd-util", "query", "-n", path, "-s"]
        psize = call(dbg, cmd)

        return {
            "key": key,
            "uuid": uuid_,
            "name": name,
            "description": description,
            "read_write": True,
            "virtual_size": vsize,
            "physical_utilisation": psize,
            "uri": ["vhd+file://" + path],
            "keys": {},
        }

if __name__ == "__main__":
    cmd = xapi.volume.Volume_commandline(Implementation())
    cmd.create()
