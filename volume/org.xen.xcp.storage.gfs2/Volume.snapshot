#!/usr/bin/env python

import uuid
import errno
import urlparse
import os
import json
import xapi
import xapi.volume
import xapi.poolhelper
from common import Lock
from xapi.common import call, touch_file_unique


class Implementation(xapi.volume.Volume_skeleton):

    def snapshot(self, dbg, sr, key):
        # Ensure path is mounted
        u = urlparse.urlparse(sr)
        if not(os.path.isdir(u.path)):
            raise xapi.volume.Sr_not_attached(sr)
        path = os.path.join(u.path, key)
        if not(os.path.exists(path)):
            raise xapi.volume.Volume_does_not_exist(path)

        # Only allow snapshots on VHD volumes
        if key.endswith(".vhd"):
            key_noext = key[:-4]
        else:
            raise xapi.volume.Unimplemented("Unsupported volume (non-vhd)")

        with Lock(os.path.join(u.path, "%s.lock" % key_noext)):
            key_base = touch_file_unique(dbg, "%s_base" % key_noext, "vhd")
            path_base = os.path.join(u.path, key_base)

            key_snap = touch_file_unique(dbg, "%s_snap" % key_noext, "vhd")
            path_snap = os.path.join(u.path, key_snap)

            xapi.poolhelper.suspend_datapath_in_pool(dbg, path)

            # Execute the VHD Snapshot
            os.rename(path, path_base)

            cmd = ["/usr/bin/vhd-util", "snapshot",
                   "-n", path, "-p", path_base]
            try:
                call(dbg, cmd)
            except:
                # Roll back
                os.unlink(path_snap)
                os.rename(path_base, path)
                xapi.poolhelper.resume_datapath_in_pool(dbg, path)
                raise xapi.volume.Unimplemented("Unable to snapshot base VHD")

            cmd = ["/usr/bin/vhd-util", "snapshot",
                   "-n", path_snap, "-p", path_base]
            try:
                call(dbg, cmd)
            except:
                # Roll back
                os.unlink(path_snap)
                os.rename(path_base, path)
                xapi.poolhelper.resume_datapath_in_pool(dbg, path)
                raise xapi.volume.Unimplemented("Unable to snapshot snap VHD")

        xapi.poolhelper.resume_datapath_in_pool(dbg, path)

        # Assemble metadata for new snapshot volume
        uuid_ = str(uuid.uuid4())
        name = key_snap
        description = key_snap
        keys = {}

        cmd = ["/usr/bin/vhd-util", "query", "-n", path_snap, "-v"]
        stdout = call(dbg, cmd)
        vsize = str(int(stdout) * 1048576)

        cmd = ["/usr/bin/vhd-util", "query", "-n", path_snap, "-s"]
        psize = call(dbg, cmd)

        # Fetch metadata from original json if available
        if os.path.exists(path + ".json"):
            with open(path + ".json", "r") as fd:
                js = json.load(fd)
                name = js["name"]
                description = js["description"]

        # Write new json metadata
        meta = {
            "uuid": uuid_,
            "name": name,
            "description": description,
            "keys": keys
        }
        with open(path_snap + ".json", "w") as json_fd:
            json.dump(meta, json_fd)
            json_fd.write("\n")

        return {
            "key": key_snap,
            "uuid": uuid_,
            "name": key_snap,
            "description": "",
            "read_write": True,
            "virtual_size": vsize,
            "physical_utilisation": psize,
            "uri": ["vhd+file://" + path_snap],
            "keys": keys
        }

if __name__ == "__main__":
    cmd = xapi.volume.Volume_commandline(Implementation())
    cmd.snapshot()
