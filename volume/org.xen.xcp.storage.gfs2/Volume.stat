#!/usr/bin/env python

import urlparse
import os
import os.path
import json
import xapi
import xapi.volume
from xapi.common import call


class Implementation(xapi.volume.Volume_skeleton):

    def stat(self, dbg, sr, key):
        u = urlparse.urlparse(sr)
        path = os.path.join(u.path, key)
        if not(os.path.exists(path)):
            raise xapi.volume.Volume_does_not_exist(key)

        # Defaults
        name = key
        description = ""
        keys = {}

        # Determine volume type by key
        if key.endswith(".vhd"):
            type = "vhd+file"
            cmd = ["/usr/bin/vhd-util", "query", "-n", path, "-v"]
            stdout = call(dbg, cmd) # Returned in megabytes
            vsize = str(int(stdout) * 1048576)
            cmd = ["/usr/bin/vhd-util", "query", "-n", path, "-s"]
            stdout = call(dbg, cmd)
            psize = stdout          # Returned in bytes already
        else:
            type = "raw+file"
            stat = os.stat(path)
            vsize = stat.st_size
            psize = vsize

        if os.path.exists(path + ".json"):
            with open(path + ".json", "r") as fd:
                js = json.load(fd)
                name = js["name"]
                description = js["description"]
                keys = js["keys"]

        return {
            "key": key,
            "name": name,
            "description": description,
            "read_write": True,
            "virtual_size": vsize,
            "physical_utilisation": psize,
            "uri": [("%s:///" % type) + path],
            "keys": keys
        }

if __name__ == "__main__":
    cmd = xapi.volume.Volume_commandline(Implementation())
    cmd.stat()
